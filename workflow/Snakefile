#snakemake -np --use-singularity 

configfile: "config/config.yaml" 

rule all: 
	input:
		expand("results/{sample}.merged.vep.vcf", sample=config["samples"])

rule retro:
	input:
		bam=lambda wildcards: config["samples"][wildcards.sample], 
		ref=expand("{ref_retro}", ref_retro=config["ref_retro"]),
		ref_fasta=expand("{ref_fasta}", ref_fasta=config["ref_fasta"])
	output:
		discover="results/{sample}.output.vcf", 
		call="results/{sample}.final.vcf"
	container: 
		"docker://kristinebilgrav/findtroll:latest"
	script:
		"run_retro.sh {input.bam} {output.discover} {input.ref} {output.discover} {input.ref_fasta} {output.call}"

rule jitter:
	input:
		bam=lambda wildcards: config["samples"][wildcards.sample], 
		ref=expand("{ref_jitter}", ref_jitter=config["ref_jitter"])
	output:
		"results/{sample}_jitter.vcf"
	params: 
		prefix=expand("{sample}", sample=config["samples"])
	container: 
		"docker://kristinebilgrav/findtroll:latest"
	shell:
		"python jitterbug.py {input.bam} {input.ref} -o {params.prefix}"

rule tiddit:
	input:
		bam=lambda wildcards: config["samples"][wildcards.sample],
		ref=expand("{ref_tiddit}", ref_tiddit=config["ref_tiddit"])
	output:
		"results/{sample}_tiddit.vcf"
	container: 
		"docker://kristinebilgrav/findtroll:latest"
	shell:
		"python TIDDIT.py --sv --bam {input.bam} --ref {input.ref} -o {output}"

rule mobileann:
	input:
		tiddit="results/{sample}_tiddit.vcf", 
		retro="results/{sample}.final.vcf"
	output:
		"results/{sample}_tiddit_retro.vcf"
	container: 
		"docker://kristinebilgrav/findtroll:latest"
	shell:
		"python MobileAnn.py --sv_annotate --sv {input.tiddit} --db {input.retro} > {output}"

rule svdb_merge:
	input:
		retro="results/{sample}.final.vcf",
		tiddit_retro="results/{sample}_tiddit_retro.vcf",
		jitter="results/{sample}_jitter.vcf"
	output:
		"results/{sample}.merged.vcf"
	container: 
		"docker://kristinebilgrav/findtroll:latest"
	shell:
		"svdb --merge --vcf {input.retro} {input.tiddit_retro} {input.jitter} > {output}"


rule vep:
	input:
		"results/{sample}.merged.vcf"
	output:
		"results/{sample}.merged.vep.vcf"
	shell:
		"{config[vep_path]} vep --cache -i {input} -o {output} --vcf --assembly GRCh37 --per_gene"

## sort before vep? bcftools sort $1 > /proj/nobackup/sens2017106/kristine/SVDB/$2/$2_merged_only_sorted.vcf

#vep --cache --dir $VEP_CACHE --offline  -i /proj/nobackup/sens2017106/kristine/SVDB/$2/$2_merged_only_sorted.vcf  -o $2_merged_sorted_VEP.vcf  --vcf  --assembly GRCh37 --per_gene

#rule annotate:
	#input:
		#"results/{sample}.merged.vep.vcf"
	#output:
		#"results/{sample}.merged.vep.annotated.vcf"
	#params: 
		#prefix=expand("{sample}", sample=config["samples"])
	#script:
		#"scripts/run_annotate.sh {input} {params.prefix}"


#rule extract:

